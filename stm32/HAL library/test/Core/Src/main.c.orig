/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
  #include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "motor.h"
#include <math.h>
#include <stdlib.h>
#include "beep.h"
#include "OLED.h"

void AutoReloadCallback(void);
int Position_PID(float error1);
uint8_t Serial_RxPacket[10];
uint8_t Serial_RxFlag;
int target_speed=0;//目标速度
int cnt2=0;
int start=0;
int motor_flag;
int error_position;
int total_distance;
int delay_time=0;
int goal_piece;
int time_cnt;
int flag=0;
int js_cnt=0;
int encoder_count; // 编码器检测到的脉冲数
int encoderNum[4] = {0};//编码数

/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM6_Init();
  MX_USART3_UART_Init();
  MX_TIM8_Init();
  /* USER CODE BEGIN 2 */
MX_GPIO_Init();
MX_USART3_UART_Init();
HAL_UART_Receive_IT(&huart3, (uint8_t *)&Serial_RxPacket[0], 3);
OLED_Init();
OLED_ColorTurn(0);
OLED_DisplayTurn(0);
OLED_ShowString(0,32,&Serial_RxPacket[0],16,0);
OLED_Refresh();

// char c;
// c='c';
  BEEP_light();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
//  MX_TIM4_Init();
//  MX_TIM5_Init();
  MX_TIM6_Init();

  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 
  
//  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 50);
//  run();
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
//  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
//  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      OLED_Clear();
     int Value=__HAL_TIM_GET_COUNTER(&htim2);
      OLED_ShowNum(0,0,time_cnt,6,16,0);
      OLED_Refresh();
      OLED_ShowNum(0,16,total_distance,6,16,0);
      OLED_Refresh();
      OLED_ShowString(0,32,&Serial_RxPacket[0],16,0);
      OLED_Refresh();
      OLED_ShowNum(0,48,__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1),6,16,0);
      OLED_Refresh();
      HAL_Delay(200);

  
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    
    
    if(htim->Instance==htim6.Instance)
    {
        static int cnt=0;
        Serial_RxFlag=0;
        
        cnt++;
        cnt2++;
        if(cnt2>9)
        {
            AutoReloadCallback(); // 定时调用
        }
        if(cnt>99)
        {
            time_cnt++;
            cnt=0;
            if(delay_time>0)
                delay_time--;
            else
                flag=0;
        }
        __HAL_TIM_CLEAR_FLAG(&htim6,TIM_FLAG_UPDATE);
    }
    
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin==JTAG_Pin)
    {
        js_cnt++;
        flag=1;
        if(js_cnt==goal_piece)
            delay_time=3;
        else if(js_cnt==5)
            delay_time=5;
        else 
            delay_time=0;
        BEEP_light();
        LED_light();
    }
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    
	
        if(start==0)
        {
            switch(Serial_RxPacket[1])
    {
        case'A':
            goal_piece=1;break;
        case'B':
            goal_piece=2;break;
        case'C':
            goal_piece=3;break;
        case'D':
            goal_piece=4;break;
        case'E':
            goal_piece=5;break;
            
    }
    start=1;
        }
        else
        {
		uint8_t *p;
            static int RxState=0;
            static uint8_t pRxPacket = 1;
            if (RxState == 0)
		{
			if (Serial_RxPacket[0] == '[' )
			{
				RxState = 1;
				pRxPacket = 1;
                int i ;
                for(i=1;Serial_RxPacket[i]!='\0';i++)
                {
                    Serial_RxPacket[i]=0;
                }
			}
		}
		else if (RxState == 1)
		{
			if (Serial_RxPacket[0] == ']')
			{
				RxState = 0;
				Serial_RxPacket[pRxPacket] = '\0';
			}
			else
			{
				Serial_RxPacket[pRxPacket] = Serial_RxPacket[0];
				pRxPacket ++;
			}
		}
        p=&Serial_RxPacket[1];
        error_position=code_transform(p)-80;
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&Serial_RxPacket[0], 1);
        
	
    
}

void AutoReloadCallback(void)
{
    int A1,B1;
//    float rotateSpeed[4] = {0};
    static int distance[4]= {0};//距离
//    float error_position;
//    int target_speed=0;//目标速度
//    char*p;
////    int i;
//    p=&Serial_RxPacket[0];
    
//    for(i=0;i<10;i++)
//    {
//        if(Serial_RxPacket[i]==',')
//        judge=Serial_RxPacket[i+1];
//        break;
//    }
    
    

//    target_speed=Position_PID(3*error_position,judge);
//    target_speed=30+0.5* abs(error_position);

//    encoderNum[0]= Read_Encoder(1);                    // 读取脉冲
//    encoderNum[1]= Read_Encoder(2);                    // 读取脉冲
//    encoderNum[2]= Read_Encoder(3);                    // 读取脉冲
//    encoderNum[3]= Read_Encoder(4);                    // 读取脉冲
    
    //距离=圈数*轮子周长  单位：cm   acos(-1.0)是π,轮子直径为4.8cm
    distance[0] = (float)(__HAL_TIM_GET_COUNTER(&htim2))/(4 * 13 * 20)*acos(-1.0)*4.8;
    distance[1] = (float)(__HAL_TIM_GET_COUNTER(&htim3))/(4 * 13 * 20)*acos(-1.0)*4.8;
    switch(motor_flag)
    {
        case 0: break;
        case 1: total_distance +=(distance[0]+distance[1])/2;break;
        case 2: total_distance+=distance[1];break;
        case 3: total_distance+=distance[2];break;
        default:break;
    }
    //距离累加并求平均值
    
    
    //转速(1秒钟转多少圈)=单位时间内的计数值/(总分辨率*时间系数) 单位：rad/s
//    rotateSpeed[0] = (float)encoderNum[0]/(4 * 13 * 20*0.01);    // 这个周期要根据定时器定的时间的改变而改变  目前是10ms读取一次
//    rotateSpeed[1] = (float)encoderNum[1]/(4 * 13 * 20*0.01);    // 这个周期要根据定时器定的时间的改变而改变  目前是10ms读取一次
//    rotateSpeed[2] = (float)encoderNum[2]/(4 * 13 * 20*0.01);    // 这个周期要根据定时器定的时间的改变而改变  目前是10ms读取一次
//    rotateSpeed[3] = (float)encoderNum[3]/(4 * 13 * 20*0.01);    // 这个周期要根据定时器定的时间的改变而改变  目前是10ms读取一次
    
//    if(flag!=1)
//    {
//    if(error_position<5)
//        run();
//    else if(judge==1)
//        right();
//    else if(judge==2)
//        left();
//     }
//     else
//         stop();

    A1 =40+Position_PID(error_position);      // PID计算
    B1 =30+ Position_PID(error_position);      // PID计算
//    A2 = Incremental_PI(rotateSpeed[2], target_speed);      // PID计算
//    B2 = Incremental_PI(rotateSpeed[3], target_speed);      // PID计算
//    A1 =A1>95?95:A1;
//    B1 =B1>95?95:B1;
if(flag!=1&&start==1)
    {
    if(abs(error_position)<20)
    {
        run(&A1,&B1);
        motor_flag=1;
    }
    else if(error_position<0)
    {
        left(&A1,&B1);
         motor_flag=2;
    }
    else if(error_position>0)
    {
        right(&A1,&B1);
         motor_flag=3;
    }
     }
     else
     {
         stop();
         motor_flag=0;
     }
   
     
     __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,A1); 
     __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,B1); 
     
//    PWMA1 = Incremental_PI(rotateSpeed[0], target_speed);      // PID计算
//    PWMB1 = Incremental_PI(rotateSpeed[1], target_speed);      // PID计算
//    PWMA2 = Incremental_PI(rotateSpeed[2], target_speed);      // PID计算
//    PWMB2 = Incremental_PI(rotateSpeed[3], target_speed);      // PID计算

    //限幅
//    limit(PWMA1);
//    limit(PWMB1);
//    limit(PWMA2);
//    limit(PWMB2);

//    printf("Moto1 = %d\r\n", PWMA);
//    vofa_sendData(rotateSpeed[0], target_speed, PWMA1); // 向上位机发送数据
//    vofa_sendData(rotateSpeed[1], target_speed, PWMA1); // 向上位机发送数据
//    vofa_sendData(rotateSpeed[2], target_speed, PWMA1); // 向上位机发送数据
//    vofa_sendData(rotateSpeed[3], target_speed, PWMA1); // 向上位机发送数据
}

int Position_PID(float error1)
{
    float Position_KP = 0.5, Position_KI = 0, Position_KD = 0;                                       // pid
    static float error, out, Integral_error, error_last;  
    int new_out;
    // 误差 输出 积分 上一次误差
    error =  error1;                                                                      // 求出速度偏差，由测量值减去目标值。
    Integral_error += error;         
//if(Integral_error>80)
//    Integral_error=80;
//if(Integral_error<-80)
//     Integral_error=-80;
    // 求出偏差的积分
    out = Position_KP * error + Position_KI * Integral_error + Position_KD * (error - error_last); // 位置式PID控制器
if(out>60)
    out=60;
if(out<-60)
     out=60;
new_out=abs((int)out);
error_last = error;                                                                            // 保存上一次偏差
    return new_out;                                                                                    // 增量输出
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
